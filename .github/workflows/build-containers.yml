name: Build and push container images

on:
  push:
  pull_request:
  workflow_dispatch:
  repository_dispatch:
    types: [dispatch-build]

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
      - name: make date tag
        id: mkdatetag
        run: echo "dtag=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

  build-image-list:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.set-images.outputs.images }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: image-list
        run: |
          ORG_DIR=opensciencegrid
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]] || [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
              BASE=$(git merge-base origin/$GITHUB_BASE_REF HEAD)
            elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              BASE=${{ github.event.before }}
            else
              BASE=origin/main
            fi
            images=$(git diff --name-only "$BASE" "$GITHUB_SHA" | egrep "^$ORG_DIR/" | cut -d/ -f -2 | sort | uniq | xargs -I {} find . -type d -wholename ./{} -printf "%P\n")
          else
            images=$(find $ORG_DIR -mindepth 1 -maxdepth 1 -type d -printf "$ORG_DIR/%P\n")
          fi
          image_json=$(echo -n "${images:-dummy}" | jq -Rcs '.|split("\n") | map(select(. != ""))')
          echo "$image_json" > image_list.json
          echo "images=$(echo $images | tr '\n' ' ')" >> $GITHUB_OUTPUT
      - name: Display image list
        run: cat image_list.json

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Run build-job-matrix script
        id: run-python-script
        run: |
          python scripts/build-job-matrix.py ${{ steps.image-list.outputs.images }}
          echo "Generated output.json:"
          cat output.json
      - name: Verify output.json
        run: |
          echo "Content of output.json:"
          cat output.json
      - id: set-images
        run: |
          IMAGES=$(cat output.json | jq -c .)
          echo "images=$IMAGES" >> $GITHUB_ENV
        shell: bash

  build:
    runs-on: ubuntu-latest
    needs: build-image-list
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read and Build Images
        run: |
          IMAGES=$(echo ${{ env.images }} | jq -c .)
          echo "Images to process: $IMAGES"
          for row in $(echo "${IMAGES}" | jq -r '.[] | @base64'); do
              _jq() {
                  echo ${row} | base64 --decode | jq -r ${1}
              }
              NAME=$(_jq '.name')
              BASE_OS=$(_jq '.base_os')
              OSG_SERIES=$(_jq '.osg_series')
              BASE_REPO=$(_jq '.base_repo')
              STANDARD_BUILD=$(_jq '.standard_build')
              REPO_BUILD=$(_jq '.repo_build')
              echo "Processing image: $NAME with base_os: $BASE_OS, osg_series: $OSG_SERIES, base_repo: $BASE_REPO"
              # Trigger the build here
              gh run workflow build-and-push-container-images.yml --context $NAME --base_os $BASE_OS --osg_series $OSG_SERIES --base_repo $BASE_REPO --standard_build $STANDARD_BUILD --repo_build $REPO_BUILD
          done
  push:
    runs-on: ubuntu-latest
    needs: [make-date-tag, build-image-list, build]
    if: >-
      github.ref == 'refs/heads/main' &&
      github.event_name != 'pull_request' &&
      github.repository_owner == 'opensciencegrid'
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push images to Docker Hub
        run: |
          IMAGES=$(echo ${{ env.images }} | jq -c .)
          for row in $(echo "${IMAGES}" | jq -r '.[] | @base64'); do
              _jq() {
                  echo ${row} | base64 --decode | jq -r ${1}
              }
              NAME=$(_jq '.name')
              BASE_OS=$(_jq '.base_os')
              OSG_SERIES=$(_jq '.osg_series')
              BASE_REPO=$(_jq '.base_repo')
              echo "Pushing image: $NAME with base_os: $BASE_OS, osg_series: $OSG_SERIES, base_repo: $BASE_REPO"
              docker push docker.io/opensciencegrid/$NAME:$OSG_SERIES-$BASE_REPO
          done