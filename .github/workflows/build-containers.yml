name: Build and push container images

on:
  push:
  pull_request:
  workflow_dispatch:
  repository_dispatch:
    types: [dispatch-build]

jobs:
  make-date-tag:
    runs-on: ubuntu-latest
    outputs:
      dtag: ${{ steps.mkdatetag.outputs.dtag }}
    steps:
      - name: make date tag
        id: mkdatetag
        run: echo "dtag=$(date +%Y%m%d-%H%M)" >> $GITHUB_OUTPUT

  build-image-list:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.image-list.outputs.images }}
      image-list-json: 'scripts/output.json'  # Path to the JSON file generated by Python script
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Modified Images
        id: image-list
        run: |
          ORG_DIR=opensciencegrid
          if [[ $GITHUB_EVENT_NAME == 'pull_request' ]] || [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
              BASE=$(git merge-base origin/$GITHUB_BASE_REF HEAD)
            elif [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              BASE=${{ github.event.before }}
            else
              BASE=origin/main
            fi
            images=$(git diff --name-only "$BASE" "$GITHUB_SHA" | egrep "^$ORG_DIR/" | cut -d/ -f -2 | sort | uniq | xargs -I {} find . -type d -wholename ./{} -printf "%P\n")
          else
            images=$(find $ORG_DIR -mindepth 1 -maxdepth 1 -type d -printf "$ORG_DIR/%P\n")
          fi
          echo "images=$images" >> $GITHUB_OUTPUT
          echo "${images}" > image_list.txt

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Run build-job-matrix script
        run: |
          python scripts/build-job-matrix.py $(cat image_list.txt) > scripts/output.json
          cat scripts/output.json

  build-and-push:
    needs: build-image-list
    if: needs.build-image-list.outputs.images != '["dummy"]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{fromJson(needs.build-image-list.outputs.image-list-json)}}
    steps:
      - uses: actions/checkout@v3

      - name: Build and Push Image
        run: |
          echo "Building image: ${{ matrix.include.name }} for OS ${{ matrix.include.base_os }} and series ${{ matrix.include.osg_series }}"
          # Place Docker build commands here
          # For example:
          docker build -t myimage:${{ matrix.include.name }}-${{ matrix.include.osg_series }}-${{ matrix.include.base_repo }} -f Dockerfile .
          # Assuming push logic is integrated here or through another action